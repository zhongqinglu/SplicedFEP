#!/usr/bin/env python

title    = 'splicedfep.mpirun'
version  = '2.3.2'
update   = '2024-08-30'
platform = 'cluster'

#------------------------------------------------------------------------------
import os, sys, shutil, subprocess, time, re # 1.2.4
import numpy as np
from multiprocessing import Pool, current_process

import logging
logging.basicConfig(level=logging.DEBUG, format='%(levelname)s\t%(message)s')
logging.info(os.path.basename(__file__))
logging.info('Version:  ' + version)
logging.info('Update:   ' + update)
logging.info('PID:      ' + '%s'%os.getpid())
logging.info('Datetime: ' + time.strftime('%Y-%m-%d %H:%M:%S'))
logging.info('Command:  ' + ' '.join(sys.argv))
logging.info('-'*50+'\n')

import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--src', default=None, type=str, metavar='None',
                     help='(Optional) Source path. Default is the directory of this script.')
parser.add_argument('--ffpath', default=None, type=str, metavar='None',
                    help='(Optional) Force-field parent directory. Default (and recommendation) is {--src}/gmxtop')
parser.add_argument('-g', '--ngpu', default=4, type=int, metavar='4',
                    help='Number of GPU available') # platform
parser.add_argument('-p', '--np', default=16, type=int, metavar='16',
                    help='Number of process') # platform
parser.add_argument('-t', '--nt', default=4, type=int, metavar='4',
                    help='Number of CPU threads per process') # platform
parser.add_argument('-s', '--nsteps', default=None, type=int, metavar='None',
                    help='(Optional) Number of steps for each FEP production run. Default is nsteps option in md.mdp. Recommendation is mutiple of 500000')
parser.add_argument('--replex', default=1000, type=int, metavar='1000',
                    help='(Optional) Number of steps for replica exchange. 0 is turn-off. Default is 1000')
#parser.add_argument('--qpath', default='/public/SHARE/zhong/Queue', type=str, metavar='/public/SHARE/zhong/Queue',
#                    help='(Optional) Queue directory.') # 2.2.0
parser.add_argument('--qpath', default=None, type=str, metavar='None',
                    help='(Optional) Queue directory. Default (and recommendation) is $HOME/Queue_fep.')
parser.add_argument('--overwrite', action='store_true',
                    help='overwrite the existed files')
parser.add_argument('--notcont', action='store_false',
                    help='do not continue from existed checkpoint')
#parser.add_argument('--gpuid', default=None, type=str, metavar=None,
#                    help='') # reserved for specified GPU ID (RSGI)
parser.add_argument('--arc', action='store_true',
                    help='archive mode') # 1.2.4
args = parser.parse_args()
logging.info(args)


# os system
import socket
logging.info('Host Name: %s' %(socket.gethostname()))
#import psutil
#logging.info('CPU percent: %f' %(psutil.cpu_percent(1)))
#RSGI
#if args.gpuid is None: gpuid = ''.join(['%d'%x for x in range(args.ngpu)])
#else: gpuid = args.gpuid

# prepare
assert shutil.which('gmx_mpi') is not None, 'gmx_mpi not found.'

if args.src is None: args.src = os.path.dirname(__file__)
logging.info('src path: %s' %args.src)
assert os.path.exists(args.src), '%s not found' %args.src

#if args.ffpath is None: args.ffpath = '%s/top' %(os.environ["GMXDATA"])
if args.ffpath is None: args.ffpath = '%s/gmxtop' %args.src
logging.info('force-field parent path: %s' %args.ffpath)
assert os.path.exists(args.ffpath), '%s not found' %args.ffpath
os.environ["GMXLIB"] = args.ffpath

if args.qpath is None: args.qpath = os.environ['HOME']+'/Queue_fep'
logging.info('queue path: %s' %args.qpath)
assert os.path.exists(args.qpath), '%s not found' %args.qpath

logging.info('-'*50+'\n')


# gmx_mpi grompp command
pdb2gmx_path  = './pdb2gmx/'
pdb2gmx_struc = 'ions.gro'
pdb2gmx_topol = 'topol.top'
cmd_grompp = {
  'em':  ['gmx_mpi','grompp',
          '-f','em.mdp',
          '-c',pdb2gmx_path+pdb2gmx_struc,
          '-r',pdb2gmx_path+pdb2gmx_struc,
          '-p',pdb2gmx_path+pdb2gmx_topol,
          '-o','em.tpr',
          '-maxwarn','2'],
  'nvt': ['gmx_mpi','grompp',
          '-f','nvt.mdp',
          '-c','em.gro',
          '-r','em.gro',
          '-p',pdb2gmx_path+pdb2gmx_topol,
          '-o','nvt.tpr',
          '-maxwarn','2'],
  'md':  ['gmx_mpi','grompp',
          '-f','md.mdp',
          '-c','nvt.gro',
          '-r','nvt.gro',
          '-p',pdb2gmx_path+pdb2gmx_topol,
          '-o','md.tpr',
          '-maxwarn','2']}

def BASH(cmd):
  subprocess.run(cmd, check=True, shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def Path_and_run(cmd, runpath):
  os.chdir(runpath)
  BASH(cmd)

def RUN_MD(mode, logger):
  #assert mode in ['em', 'nvt', 'md']
  logging.info(logger + mode)
  if args.overwrite or not all([os.path.exists('%02d/%s.gro' %(x,mode)) for x in range(args.np)]):
    cmdm  = ['mpirun','-oversubscribe', '-np','%d' %args.np] # slurm
    #cmdm  = ['mpirun','-np','%d' %args.np]
    cmdm += ['gmx_mpi','mdrun','-deffnm',mode]
    cmdm += ['-multidir'] + ['%02d'%x for x in range(args.np)]
    cmdm += ['-ntomp','%d' %args.nt]
    cmdm += ['-nb','gpu']
    #if mode != 'em' : cmdm += ['-bonded','gpu']
    #cmdm += ['-gpu_id', gpuid] #RSGI
    cmdm += ['-gpu_id'] + [''.join(['%d'%x for x in range(args.ngpu)])] # 1.2.4
    cmdm += ['-pin','on']
    if mode == 'md' and args.replex > 0 : cmdm += ['-replex', '%d' %args.replex]
    if mode == 'md' and args.nsteps is not None : cmdm += ['-nsteps', '%d' %args.nsteps]
    if args.notcont and all([os.path.exists('%02d/%s.cpt' %(x,mode)) for x in range(args.np)]):
      cmdm += ['-cpi','%s.cpt' %mode]
    else:
      cmdg = ' '.join(cmd_grompp[mode])
      logging.info(logger + cmdg)
      cpath = os.getcwd()
      ## serial
      #for i in range(args.np):
      #  os.chdir('%02d'%i)
      #  BASH(cmdg)
      #  os.chdir('..')
      ## parallel
      with Pool(args.np) as p:
        p.starmap(Path_and_run, zip([cmdg]*args.np, ['%02d'%x for x in range(args.np)]))
      os.chdir(cpath)
     
    cmdm = ' '.join(cmdm)
    logging.info(logger + cmdm)
    BASH(cmdm)
    logging.info(logger + 'Completed')
  else:
    logging.info(logger + 'Existed')

def GetQueue(qid):
  fn = '%s/%s' %(args.qpath, qid)
  if os.path.exists(fn):
    with open(fn, 'r') as f: out = f.read().strip()
    return out
  else:
    return ''
  
def RUN(code):
  lpath = GetQueue(code)
  if os.path.isdir(lpath):
    logger = '%s\t' %(code)
    logging.info(logger + lpath)
    # 1.2.4
    if args.arc:
      args.ngpu = 8
      args.np = int(re.compile(r'w\d\d\.t').findall(lpath)[0][1:3])
      args.nt = 128//args.np
      logging.info(logger + 'ngpu=%d, np=%d, nt=%d' %(args.ngpu, args.np, args.nt))
    os.chdir(lpath)
    for m in ['em', 'nvt', 'md']:
      RUN_MD(m, logger)
    os.chdir(lpath)
    os.makedirs('xvg', exist_ok=True)
    for i in range(args.np):
      BASH('ln -f -s %s/%02d/md.xvg xvg/dhdl.%02d.xvg' %(lpath, i, i))
    logging.info(logger + 'soft-link to %s/xvg' %lpath)
    logging.info('Datetime: ' + time.strftime('%Y-%m-%d %H:%M:%S'))

# code range 100-999
for c in range(100,1000):
  #RUN(c)
  try:
    RUN(c)
  except:
    logging.info('Exception code: %d' %c)
    logging.info('Datetime: ' + time.strftime('%Y-%m-%d %H:%M:%S'))

